  [
    {
      "code": "UPM",
      "extendedName": "Unnecessary Privileges to Microservices",
      "propertiesAffected": [
        {"category": "SECURITY", "name": "Confidentiality", "impactsPositively": 0},
        {"category": "SECURITY", "name": "Integrity", "impactsPositively": 0},
        {"category": "PERFORMANCE_EFFICIENCY", "name": "Resource utilization", "impactsPositively": 0},
        {"category": "MAINTAINABILITY", "name": "Analysability", "impactsPositively": 0}
      ],
      "refactoring": {
        "name": "Apply Least Privilege Principle",
        "refactor": "The microservice <template nome microservice> should have the least amount of access privileges they need to suitably perform their business function.",
        "propertiesAffected": [
          {"category": "SECURITY", "name": "Confidentiality", "impactsPositively": 1},
          {"category": "SECURITY", "name": "Integrity", "impactsPositively": 1},
          {"category": "PERFORMANCE_EFFICIENCY", "name": "Resource utilization", "impactsPositively": 1},
          {"category": "MAINTAINABILITY", "name": "Analysability", "impactsPositively": 1},
          {"category": "MAINTAINABILITY", "name": "Modularity", "impactsPositively": 1}
        ]
      }
    },
    {
      "code": "HS",
      "extendedName": "Hardcoded Secrets",
      "propertiesAffected": [
        {"category": "SECURITY", "name": "Confidentiality", "impactsPositively": 0},
        {"category": "SECURITY", "name": "Integrity", "impactsPositively": 0},
        {"category": "SECURITY", "name": "Authenticity", "impactsPositively": 0}
      ],
      "refactoring": {
        "name": "Encrypt Secrets at Rest",
        "refactor": "The secrets detected in <template pod-name> should be encrypted at Rest.",
        "propertiesAffected": [
          {"category": "SECURITY", "name": "Confidentiality", "impactsPositively": 1},
          {"category": "SECURITY", "name": "Integrity", "impactsPositively": 1},
          {"category": "SECURITY", "name": "Authenticity", "impactsPositively": 1}
        ]
      }
    },
    {
      "code": "NSC",
      "extendedName": "Non-Secured Service-to-Service Communications",
      "propertiesAffected": [
        {"category": "SECURITY", "name": "Confidentiality", "impactsPositively": 0},
        {"category": "SECURITY", "name": "Integrity", "impactsPositively": 0},
        {"category": "SECURITY", "name": "Authenticity", "impactsPositively": 0},
        {"category": "MAINTAINABILITY", "name": "Analysability", "impactsPositively": 0}
      ],
      "refactoring": {
        "name": "Use of Mutual Transport Layer Security",
        "refactor": "The effects of this smell, detected in pod <template pod-name>, can be mitigated with the Use of Mutual Transport Layer Security. It provides a bidirectional encryption channel that ensures integrity and confidentiality in service-to-service comunications.",
        "propertiesAffected": [
          {"category": "SECURITY", "name": "Confidentiality", "impactsPositively": 1},
          {"category": "SECURITY", "name": "Integrity", "impactsPositively": 1},
          {"category": "SECURITY", "name": "Authenticity", "impactsPositively": 1},
          {"category": "PERFORMANCE_EFFICIENCY", "name": "Time behaviour", "impactsPositively": 0}
        ]
      }
    },
    {
      "code": "OCC",
      "extendedName": "Own Crypto Code",
      "propertiesAffected": [
        {"category": "SECURITY", "name": "Confidentiality", "impactsPositively": 0},
        {"category": "SECURITY", "name": "Integrity", "impactsPositively": 0},
        {"category": "SECURITY", "name": "Authenticity", "impactsPositively": 0}
      ],
      "refactoring": {
        "name": "Use of Established Encryption Technologies",
        "refactor": "The use of own encryption solutions in <template script-python> can cause Confidentiality, Integrity, and Authenticity issues. Replace this encryption method with established and well tested encryption algorithms.",
        "propertiesAffected": [
          {"category": "SECURITY", "name": "Confidentiality", "impactsPositively": 1},
          {"category": "SECURITY", "name": "Integrity", "impactsPositively": 1},
          {"category": "SECURITY", "name": "Authenticity", "impactsPositively": 1}
        ]
      }
    },
    {
      "code": "PAM",
      "extendedName": "Publicly Accessible Microservices",
      "propertiesAffected": [
        {"category": "SECURITY", "name": "Confidentiality", "impactsPositively": 0},
        {"category": "MAINTAINABILITY", "name": "Modifiability", "impactsPositively": 0},
        {"category": "MAINTAINABILITY", "name": "Testability", "impactsPositively": 0}
      ],
      "refactoring": {
        "name": "Add an API Gateway",
        "refactor": "The effects of this smell can be mitagted by adding an API Gateway that centrally enforces security for all the requests entering the microservices application, including authentication, authorization, throttling, and message content validation for known security threats.",
        "propertiesAffected": [
          {"category": "SECURITY", "name": "Confidentiality", "impactsPositively": 1},
          {"category": "SECURITY", "name": "Authenticity", "impactsPositively": 1},
          {"category": "MAINTAINABILITY", "name": "Analysability", "impactsPositively": 1},
          {"category": "MAINTAINABILITY", "name": "Modifiability", "impactsPositively": 1},
          {"category": "MAINTAINABILITY", "name": "Reusability", "impactsPositively": 1},
          {"category": "MAINTAINABILITY", "name": "Testability", "impactsPositively": 1}
        ]
      }
    },
    {
      "code": "NEDE",
      "extendedName": "Non-Encrypted Data Exposure",
      "propertiesAffected": [
        {"category": "SECURITY", "name": "Confidentiality", "impactsPositively": 0},
        {"category": "SECURITY", "name": "Integrity", "impactsPositively": 0},
        {"category": "SECURITY", "name": "Authenticity", "impactsPositively": 0}
      ],
      "refactoring": {
        "name": "Encrypt all Sensitive Data at Rest",
        "refactor": "The effects of this smell can be mitigated by encrypting all sensitive data. Encryption should be applied to <template file-name> with: <template - description>.",
        "propertiesAffected": [
          {"category": "SECURITY", "name": "Confidentiality", "impactsPositively": 1},
          {"category": "SECURITY", "name": "Integrity", "impactsPositively": 1},
          {"category": "SECURITY", "name": "Authenticity", "impactsPositively": 1}
        ]
      }
    },
    {
      "code": "UT",
      "extendedName": "Unauthenticated Traffic",
      "propertiesAffected": [
        {"category": "SECURITY", "name": "Authenticity", "impactsPositively": 0}
      ],
      "refactoring": {
        "name": "Use Mutual TLS + OpenID Connect",
        "refactor": "The effects of this smell can be mitigated by using (i) Mutual TLS and (ii) OpenID Connect. (i) Mutual TLS enables authentication between any two interacting services. (ii) OpenID Connect is the most used mechanism to manage user authentication and it is based on the use of an ID token, typically a JSON Web Token.",
        "propertiesAffected": [
          {"category": "SECURITY", "name": "Confidentiality", "impactsPositively": 1},
          {"category": "SECURITY", "name": "Integrity", "impactsPositively": 1},
          {"category": "SECURITY", "name": "Authenticity", "impactsPositively": 1},
          {"category": "MAINTAINABILITY", "name": "Reusability", "impactsPositively": 1},
          {"category": "PERFORMANCE_EFFICIENCY", "name": "Time behaviour", "impactsPositively": 0}
        ]
      }
    },
    {
      "code": "MUA",
      "extendedName": "Multiple User Authentication",
      "propertiesAffected": [
        {"category": "SECURITY", "name": "Authenticity", "impactsPositively": 0},
        {"category": "MAINTAINABILITY", "name": "Modifiability", "impactsPositively": 0},
        {"category": "MAINTAINABILITY", "name": "Testability", "impactsPositively": 0}
      ],
      "refactoring": {
        "name": "Use Single Sign-On",
        "refactor": "The effects of this smell, detected in <template deployment-file-name>, can be mitigated with the use of Single Sign-On. This can be achieved by: (i) adding an API Gateway acting as a single entry point to the application; (ii) using OpenID Connect to share the user context among the microservices.",
        "propertiesAffected": [
          {"category": "SECURITY", "name": "Confidentiality", "impactsPositively": 1},
          {"category": "SECURITY", "name": "Authenticity", "impactsPositively": 1},
          {"category": "MAINTAINABILITY", "name": "Analysability", "impactsPositively": 1},
          {"category": "MAINTAINABILITY", "name": "Modifiability", "impactsPositively": 1},
          {"category": "MAINTAINABILITY", "name": "Reusability", "impactsPositively": 1},
          {"category": "MAINTAINABILITY", "name": "Testability", "impactsPositively": 1}
        ]
      }
    },
    {
      "code": "IAC",
      "extendedName": "Insufficient Access Control",
      "propertiesAffected": [
        {"category": "SECURITY", "name": "Confidentiality", "impactsPositively": 0},
        {"category": "MAINTAINABILITY", "name": "Analysability", "impactsPositively": 0}
      ],
      "refactoring": {
        "name": "Use OAuth 2.0",
        "refactor": "The effects of this smell, detected missing access control in <template daployment-file-name>, can be mitigated through the use of Open Authorization (OAuth) 2.0.",
        "propertiesAffected": [
          {"category": "SECURITY", "name": "Confidentiality", "impactsPositively": 1},
          {"category": "MAINTAINABILITY", "name": "Reusability", "impactsPositively": 1}
        ]
      }
    },
    {
      "code": "CA",
      "extendedName": "Centralized Authorization",
      "propertiesAffected": [
        {"category": "SECURITY", "name": "Authenticity", "impactsPositively": 0},
        {"category": "PERFORMANCE_EFFICIENCY", "name": "Time behaviour", "impactsPositively": 0},
        {"category": "MAINTAINABILITY", "name": "Testability", "impactsPositively": 1}
      ],
      "refactoring": {
        "name": " Use Decentralized Authorization",
        "refactor": "The effects of this smell, detected missing access control in <template daployment-file-name>, can be mitigated by using Decentralized Authorization which can be achieved by developing a token-based authorization mechanism. JSON Web Token (JWT) is the most used mechanism to implement such refactoring.",
        "propertiesAffected": [
          {"category": "SECURITY", "name": "Authenticity", "impactsPositively": 1},
          {"category": "MAINTAINABILITY", "name": "Testability", "impactsPositively": 0},
          {"category": "MAINTAINABILITY", "name": "Modularity", "impactsPositively": 1},
          {"category": "PERFORMANCE_EFFICIENCY", "name": "Resource utilization", "impactsPositively": 0}
        ]
      }
    }
  ]

