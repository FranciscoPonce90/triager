  [
    {
      "code": "UPM",
      "extendedName": "Unnecessary Privileges to Microservices",
      "propertiesAffected": [
        {"category": "SECURITY", "name": "Confidentiality", "impactsPositively": 0},
        {"category": "SECURITY", "name": "Integrity", "impactsPositively": 0},
        {"category": "PERFORMANCE_EFFICIENCY", "name": "Resource utilization", "impactsPositively": 0},
        {"category": "MAINTAINABILITY", "name": "Analysability", "impactsPositively": 0}
      ],
      "refactoring": {
        "name": "Apply Least Privilege Principle",
        "refactor": "The microservice associated with <file_name> should have the least amount of access privileges they need to suitably perform their business function.",
        "propertiesAffected": [
          {"category": "SECURITY", "name": "Confidentiality", "impactsPositively": 1},
          {"category": "SECURITY", "name": "Integrity", "impactsPositively": 1},
          {"category": "PERFORMANCE_EFFICIENCY", "name": "Resource utilization", "impactsPositively": 1},
          {"category": "MAINTAINABILITY", "name": "Analysability", "impactsPositively": 1},
          {"category": "MAINTAINABILITY", "name": "Modularity", "impactsPositively": 1}
        ]
      }
    },
    {
      "code": "HS",
      "extendedName": "Hardcoded Secrets",
      "propertiesAffected": [
        {"category": "SECURITY", "name": "Confidentiality", "impactsPositively": 0},
        {"category": "SECURITY", "name": "Integrity", "impactsPositively": 0},
        {"category": "SECURITY", "name": "Authenticity", "impactsPositively": 0}
      ],
      "refactoring": {
        "name": "Encrypt Secrets at Rest",
        "refactor": "The secrets detected in <file_name> should be encrypted at Rest.",
        "propertiesAffected": [
          {"category": "SECURITY", "name": "Confidentiality", "impactsPositively": 1},
          {"category": "SECURITY", "name": "Integrity", "impactsPositively": 1},
          {"category": "SECURITY", "name": "Authenticity", "impactsPositively": 1}
        ]
      }
    },
    {
      "code": "NSC",
      "extendedName": "Non-Secured Service-to-Service Communications",
      "propertiesAffected": [
        {"category": "SECURITY", "name": "Confidentiality", "impactsPositively": 0},
        {"category": "SECURITY", "name": "Integrity", "impactsPositively": 0},
        {"category": "SECURITY", "name": "Authenticity", "impactsPositively": 0},
        {"category": "MAINTAINABILITY", "name": "Analysability", "impactsPositively": 0}
      ],
      "refactoring": {
        "name": "Use of Mutual Transport Layer Security",
        "refactor": "The microservices in pod <file_name> should use Mutual Transport Layer Security (MTLS). MTLS provides a bidirectional encryption channel that ensures integrity and confidentiality in service-to-service comunications.",
        "propertiesAffected": [
          {"category": "SECURITY", "name": "Confidentiality", "impactsPositively": 1},
          {"category": "SECURITY", "name": "Integrity", "impactsPositively": 1},
          {"category": "SECURITY", "name": "Authenticity", "impactsPositively": 1},
          {"category": "PERFORMANCE_EFFICIENCY", "name": "Time behaviour", "impactsPositively": 0}
        ]
      }
    },
    {
      "code": "OCC",
      "extendedName": "Own Crypto Code",
      "propertiesAffected": [
        {"category": "SECURITY", "name": "Confidentiality", "impactsPositively": 0},
        {"category": "SECURITY", "name": "Integrity", "impactsPositively": 0},
        {"category": "SECURITY", "name": "Authenticity", "impactsPositively": 0}
      ],
      "refactoring": {
        "name": "Use of Established Encryption Technologies",
        "refactor": "The own encryption solutions used in <file_name> should be replaced by reusing established encryption technologies.",
        "propertiesAffected": [
          {"category": "SECURITY", "name": "Confidentiality", "impactsPositively": 1},
          {"category": "SECURITY", "name": "Integrity", "impactsPositively": 1},
          {"category": "SECURITY", "name": "Authenticity", "impactsPositively": 1}
        ]
      }
    },
    {
      "code": "PAM",
      "extendedName": "Publicly Accessible Microservices",
      "propertiesAffected": [
        {"category": "SECURITY", "name": "Confidentiality", "impactsPositively": 0},
        {"category": "MAINTAINABILITY", "name": "Modifiability", "impactsPositively": 0},
        {"category": "MAINTAINABILITY", "name": "Testability", "impactsPositively": 0}
      ],
      "refactoring": {
        "name": "Add an API Gateway",
        "refactor": "An API Gateway should be used to centrally enforce security for all the requests entering the microservices application (e.g., authentication, authorization, throttling, and message content validation).",
        "propertiesAffected": [
          {"category": "SECURITY", "name": "Confidentiality", "impactsPositively": 1},
          {"category": "SECURITY", "name": "Authenticity", "impactsPositively": 1},
          {"category": "MAINTAINABILITY", "name": "Analysability", "impactsPositively": 1},
          {"category": "MAINTAINABILITY", "name": "Modifiability", "impactsPositively": 1},
          {"category": "MAINTAINABILITY", "name": "Reusability", "impactsPositively": 1},
          {"category": "MAINTAINABILITY", "name": "Testability", "impactsPositively": 1}
        ]
      }
    },
    {
      "code": "NEDE",
      "extendedName": "Non-Encrypted Data Exposure",
      "propertiesAffected": [
        {"category": "SECURITY", "name": "Confidentiality", "impactsPositively": 0},
        {"category": "SECURITY", "name": "Integrity", "impactsPositively": 0},
        {"category": "SECURITY", "name": "Authenticity", "impactsPositively": 0}
      ],
      "refactoring": {
        "name": "Encrypt all Sensitive Data at Rest",
        "refactor": "All the sensitive data handled by the microservices in <file_name> should be suitably encrypted.",
        "propertiesAffected": [
          {"category": "SECURITY", "name": "Confidentiality", "impactsPositively": 1},
          {"category": "SECURITY", "name": "Integrity", "impactsPositively": 1},
          {"category": "SECURITY", "name": "Authenticity", "impactsPositively": 1}
        ]
      }
    },
    {
      "code": "UT",
      "extendedName": "Unauthenticated Traffic",
      "propertiesAffected": [
        {"category": "SECURITY", "name": "Authenticity", "impactsPositively": 0}
      ],
      "refactoring": {
        "name": "Use Mutual TLS + OpenID Connect",
        "refactor": "The microservices in <file_name> should rely on Mutual TLS (which enables authentication between any two interacting services) and OpenID Connect (which manages user authentication, typically based on JSON Web Tokens).",
        "propertiesAffected": [
          {"category": "SECURITY", "name": "Confidentiality", "impactsPositively": 1},
          {"category": "SECURITY", "name": "Integrity", "impactsPositively": 1},
          {"category": "SECURITY", "name": "Authenticity", "impactsPositively": 1},
          {"category": "MAINTAINABILITY", "name": "Reusability", "impactsPositively": 1},
          {"category": "PERFORMANCE_EFFICIENCY", "name": "Time behaviour", "impactsPositively": 0}
        ]
      }
    },
    {
      "code": "MUA",
      "extendedName": "Multiple User Authentication",
      "propertiesAffected": [
        {"category": "SECURITY", "name": "Authenticity", "impactsPositively": 0},
        {"category": "MAINTAINABILITY", "name": "Modifiability", "impactsPositively": 0},
        {"category": "MAINTAINABILITY", "name": "Testability", "impactsPositively": 0}
      ],
      "refactoring": {
        "name": "Use Single Sign-On",
        "refactor": "The microservices in <file_name> should use a single sign-on. This can be achieved by: (i) adding an API Gateway acting as a single entry point to the application; (ii) using OpenID Connect to share the user context among the microservices.",
        "propertiesAffected": [
          {"category": "SECURITY", "name": "Confidentiality", "impactsPositively": 1},
          {"category": "SECURITY", "name": "Authenticity", "impactsPositively": 1},
          {"category": "MAINTAINABILITY", "name": "Analysability", "impactsPositively": 1},
          {"category": "MAINTAINABILITY", "name": "Modifiability", "impactsPositively": 1},
          {"category": "MAINTAINABILITY", "name": "Reusability", "impactsPositively": 1},
          {"category": "MAINTAINABILITY", "name": "Testability", "impactsPositively": 1}
        ]
      }
    },
    {
      "code": "IAC",
      "extendedName": "Insufficient Access Control",
      "propertiesAffected": [
        {"category": "SECURITY", "name": "Confidentiality", "impactsPositively": 0},
        {"category": "MAINTAINABILITY", "name": "Analysability", "impactsPositively": 0}
      ],
      "refactoring": {
        "name": "Use OAuth 2.0",
        "refactor": "The missing access control in <file_name> should be mitigated by exploiting Open Authorization (OAuth) 2.0.",
        "propertiesAffected": [
          {"category": "SECURITY", "name": "Confidentiality", "impactsPositively": 1},
          {"category": "MAINTAINABILITY", "name": "Reusability", "impactsPositively": 1}
        ]
      }
    },
    {
      "code": "CA",
      "extendedName": "Centralized Authorization",
      "propertiesAffected": [
        {"category": "SECURITY", "name": "Authenticity", "impactsPositively": 0},
        {"category": "PERFORMANCE_EFFICIENCY", "name": "Time behaviour", "impactsPositively": 0},
        {"category": "MAINTAINABILITY", "name": "Testability", "impactsPositively": 1}
      ],
      "refactoring": {
        "name": "Use Decentralized Authorization",
        "refactor": "The authorization for the microservices in <file_name> should be decentralized through token-based authorization mechanism, e.g., JSON Web Token (JWT).",
        "propertiesAffected": [
          {"category": "SECURITY", "name": "Authenticity", "impactsPositively": 1},
          {"category": "MAINTAINABILITY", "name": "Testability", "impactsPositively": 0},
          {"category": "MAINTAINABILITY", "name": "Modularity", "impactsPositively": 1},
          {"category": "PERFORMANCE_EFFICIENCY", "name": "Resource utilization", "impactsPositively": 0}
        ]
      }
    }
  ]

